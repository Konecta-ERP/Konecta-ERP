name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: write
  id-token: write

jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Determine version tag
        id: versioning
        run: |
          # main uses VERSION (MAJOR.MINOR) + BUILD_NUMBER auto-increment
          if [ "${{ github.ref_name }}" = "main" ]; then
            if [ ! -f VERSION ]; then
              echo "VERSION file missing at repo root" >&2
              exit 1
            fi
            if [ ! -f BUILD_NUMBER ]; then
              echo "0" > BUILD_NUMBER
            fi
            MAJOR_MINOR=$(cat VERSION | tr -d ' \t\n\r')
            BUILD=$(cat BUILD_NUMBER | tr -d ' \t\n\r')
            # increment build
            NEW_BUILD=$((BUILD + 1))
            # write back (will commit later)
            printf "%d" $NEW_BUILD > BUILD_NUMBER
            BUILD_PAD=$(printf "%02d" $NEW_BUILD)
            VERSION_TAG="${MAJOR_MINOR}.${BUILD_PAD}"
            # set env for subsequent steps
            echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
            echo "NEW_BUILD=$NEW_BUILD" >> $GITHUB_ENV
            echo "MAJOR_MINOR=$MAJOR_MINOR" >> $GITHUB_ENV
          else
            COMMIT_HASH=$(git rev-parse --short HEAD)
            VERSION_TAG="dev-${COMMIT_HASH}"
            echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          fi
          echo "Using VERSION_TAG=${VERSION_TAG}"

      - name: TruffleHog secret scan (frontend only path)
        uses: ./.github/actions/security-scan
        with:
          path: frontend
          fail: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install & Test Angular
        working-directory: frontend
        run: |
          npm ci
          npm run lint
          npm run test -- --watch=false

      - name: Build Angular (prod)
        working-directory: frontend
        run: npm run build -- --configuration production

      - name: OIDC Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker auth
        run: gcloud auth configure-docker gcr.io

      - name: Build Docker image (frontend)
        run: |
          IMAGE="gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:${VERSION_TAG}"
          docker build -t "$IMAGE" frontend/
          echo "Built $IMAGE"

      - name: Trivy image scan (frontend)
        uses: ./.github/actions/security-scan
        with:
          image_ref: "gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:${{ env.VERSION_TAG }}"
          scan_type: image
          fail: true

      - name: Push Docker image (frontend)
        run: |
          IMAGE="gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:${VERSION_TAG}"
          docker push "$IMAGE"
          # optionally push latest on main
          if [ "${{ github.ref_name }}" = "main" ]; then
            docker tag "$IMAGE" "gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:latest"
            docker push "gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:latest"
          fi

      - name: Deploy to GKE (frontend)
        run: |
          NAMESPACE=$([ "${{ github.ref_name }}" = "main" ] && echo "production" || echo "staging")
          IMAGE="gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:${VERSION_TAG}"
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --region=${{ secrets.GCP_REGION }}
          kubectl config set-context --current --namespace="$NAMESPACE"
          kubectl set image deployment/frontend frontend="$IMAGE" --record
          kubectl rollout status deployment/frontend

      - name: Commit bumped BUILD_NUMBER (main only)
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GIT_COMMITTER_NAME: "github-actions[bot]"
          GIT_COMMITTER_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
        run: |
          git config user.name "$GIT_COMMITTER_NAME"
          git config user.email "$GIT_COMMITTER_EMAIL"
          # stage BUILD_NUMBER file change
          git add BUILD_NUMBER
          if git diff --cached --quiet; then
            echo "No BUILD_NUMBER changes to commit"
          else
            git commit -m "chore: bump BUILD_NUMBER to ${NEW_BUILD} [ci skip]"
            git push origin HEAD:main
          fi
